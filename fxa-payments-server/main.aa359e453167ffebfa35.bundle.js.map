{"version":3,"file":"main.aa359e453167ffebfa35.bundle.js","sources":["webpack:///./src/lib/config.ts"],"sourcesContent":["// This configuration is a subset of the configuration declared in server/config/index.js\n// Which config is copied over is defined in server/lib/server.js\nexport interface Config {\n  featureFlags: {[key: string]: any}\n  servers: {\n    auth: {\n      url: string\n    }\n    content: {\n      url: string\n    }\n    oauth: {\n      url: string\n    }\n    profile: {\n      url: string\n    }\n  }\n  stripe: {\n    apiKey: string\n  }\n  lang: string\n}\n\nexport const config: Config = {\n  featureFlags: {},\n  servers: {\n    auth: {\n      url: '',\n    },\n    content: {\n      url: '',\n    },\n    oauth: {\n      url: '',\n    },\n    profile: {\n      url: '',\n    },\n  },\n  stripe: {\n    apiKey: '',\n  },\n  lang: '',\n};\n\nfunction decodeConfig(content: string|null) {\n  if (!content) {\n    throw new Error('Configuration is empty');\n  }\n  const decoded = decodeURIComponent(content);\n  try {\n    return JSON.parse(decoded);\n  } catch (e) {\n    throw new Error(`Invalid configuration ${JSON.stringify(content)}: ${decoded}`);\n  }\n}\n\nexport function readConfigFromMeta() {\n  const configEl = document.head.querySelector('meta[name=\"fxa-config\"]');\n  if (!configEl) {\n    throw new Error('<meta name=\"fxa-config\"> is missing');\n  }\n  updateConfig(decodeConfig(configEl.getAttribute('content')));\n  const featureEl = document.head.querySelector('meta[name=\"fxa-feature-flags\"]');\n  if (!featureEl) {\n    throw new Error('<meta name=\"fxa-feature-flags\"> is missing');\n  }\n  updateConfig({featureFlags: decodeConfig(featureEl.getAttribute('content'))});\n  updateConfig({lang: document.documentElement.lang});\n}\n\nfunction merge(obj: any, data: any) {\n  for (const [key, value] of Object.entries(data)) {\n    if (value === null || typeof value !== \"object\") {\n      obj[key] = value;\n    } else {\n      if (!obj[key]) {\n        obj[key] = {};\n      }\n      merge(obj[key], value);\n    }\n  }\n  return obj;\n}\n\nexport function updateConfig(newData: any) {\n  merge(config, newData);\n}\n"],"mappings":"AAwBA","sourceRoot":""}